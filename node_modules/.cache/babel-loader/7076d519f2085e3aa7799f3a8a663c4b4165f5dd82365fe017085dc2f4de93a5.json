{"ast":null,"code":"var _jsxFileName = \"/Users/amaraceresi/bootcamp/challenges/react-portfolio/src/screens/components/Typewritter/Typewritter.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport \"./Typewritter.css\";\n\n/**\r\n * \r\n * @param {Array} data  - Array[]: Array of strings to be typed\r\n * @param {Number} TypeSpeed - Number: speed of typing in milliseconds\r\n * @param {Number} MsgDelay - Number: delay between each message in milliseconds\r\n * --------------------------------------------------------------\r\n * \r\n * usage: \r\n * \r\n * <Typewritter \r\n * \r\n * &nbsp;&nbsp;&nbsp;data={msgArray} \r\n * \r\n * &nbsp;&nbsp;&nbsp;TypeSpeed={100}\r\n * \r\n * &nbsp;&nbsp;&nbsp;MsgDelay={2000}\r\n * \r\n * />\r\n */\n\n// https://jsdoc.app/tags-param.html\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Typewritter({\n  data = [],\n  TypeSpeed = 100,\n  MsgDelay = 2000\n}) {\n  _s();\n  useEffect(() => {\n    let CharacterPos = 0;\n    let MsgBuffer = \"\";\n    let MsgIndex = 0;\n    let delay;\n    function StartTyping() {\n      let id = document.getElementById(\"typing-text\");\n      if (CharacterPos !== data[MsgIndex].length) {\n        MsgBuffer = MsgBuffer + data[MsgIndex].charAt(CharacterPos);\n        id.value = MsgBuffer + \"_\";\n        delay = TypeSpeed;\n      } else {\n        delay = MsgDelay;\n        MsgBuffer = \"\";\n        CharacterPos = -1;\n        if (MsgIndex !== data.length - 1) {\n          MsgIndex++;\n        } else {\n          MsgIndex = 0;\n        }\n      }\n      CharacterPos++;\n      setTimeout(StartTyping, delay);\n    }\n    StartTyping();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"textarea\", {\n    id: \"typing-text\",\n    readOnly: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(Typewritter, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Typewritter;\nexport default Typewritter;\nvar _c;\n$RefreshReg$(_c, \"Typewritter\");","map":{"version":3,"names":["useEffect","jsxDEV","_jsxDEV","Typewritter","data","TypeSpeed","MsgDelay","_s","CharacterPos","MsgBuffer","MsgIndex","delay","StartTyping","id","document","getElementById","length","charAt","value","setTimeout","readOnly","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/amaraceresi/bootcamp/challenges/react-portfolio/src/screens/components/Typewritter/Typewritter.jsx"],"sourcesContent":["import { useEffect } from 'react';\r\nimport \"./Typewritter.css\";\r\n\r\n/**\r\n * \r\n * @param {Array} data  - Array[]: Array of strings to be typed\r\n * @param {Number} TypeSpeed - Number: speed of typing in milliseconds\r\n * @param {Number} MsgDelay - Number: delay between each message in milliseconds\r\n * --------------------------------------------------------------\r\n * \r\n * usage: \r\n * \r\n * <Typewritter \r\n * \r\n * &nbsp;&nbsp;&nbsp;data={msgArray} \r\n * \r\n * &nbsp;&nbsp;&nbsp;TypeSpeed={100}\r\n * \r\n * &nbsp;&nbsp;&nbsp;MsgDelay={2000}\r\n * \r\n * />\r\n */\r\n\r\n// https://jsdoc.app/tags-param.html\r\n\r\nfunction Typewritter({ data = [], TypeSpeed = 100, MsgDelay = 2000}) {\r\n  useEffect(() => {\r\n    let CharacterPos = 0;\r\n    let MsgBuffer = \"\";\r\n    let MsgIndex = 0;\r\n    let delay;\r\n\r\n    function StartTyping() {\r\n      let id = document.getElementById(\"typing-text\");\r\n      if (CharacterPos !== data[MsgIndex].length) {\r\n        MsgBuffer = MsgBuffer + data[MsgIndex].charAt(CharacterPos);\r\n        id.value = MsgBuffer + \"_\";\r\n        delay = TypeSpeed;\r\n      } else {\r\n        delay = MsgDelay;\r\n        MsgBuffer = \"\";\r\n        CharacterPos = -1;\r\n        if (MsgIndex !== data.length - 1) {\r\n          MsgIndex++;\r\n        } else {\r\n          MsgIndex = 0\r\n        }\r\n      }\r\n      CharacterPos++;\r\n      setTimeout(StartTyping, delay);\r\n    }\r\n\r\n    StartTyping();\r\n\r\n  }, []);\r\n\r\n  return (\r\n\r\n    <textarea id=\"typing-text\" readOnly></textarea>\r\n  )\r\n}\r\n\r\nexport default Typewritter"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAO,mBAAmB;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,WAAWA,CAAC;EAAEC,IAAI,GAAG,EAAE;EAAEC,SAAS,GAAG,GAAG;EAAEC,QAAQ,GAAG;AAAI,CAAC,EAAE;EAAAC,EAAA;EACnEP,SAAS,CAAC,MAAM;IACd,IAAIQ,YAAY,GAAG,CAAC;IACpB,IAAIC,SAAS,GAAG,EAAE;IAClB,IAAIC,QAAQ,GAAG,CAAC;IAChB,IAAIC,KAAK;IAET,SAASC,WAAWA,CAAA,EAAG;MACrB,IAAIC,EAAE,GAAGC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC;MAC/C,IAAIP,YAAY,KAAKJ,IAAI,CAACM,QAAQ,CAAC,CAACM,MAAM,EAAE;QAC1CP,SAAS,GAAGA,SAAS,GAAGL,IAAI,CAACM,QAAQ,CAAC,CAACO,MAAM,CAACT,YAAY,CAAC;QAC3DK,EAAE,CAACK,KAAK,GAAGT,SAAS,GAAG,GAAG;QAC1BE,KAAK,GAAGN,SAAS;MACnB,CAAC,MAAM;QACLM,KAAK,GAAGL,QAAQ;QAChBG,SAAS,GAAG,EAAE;QACdD,YAAY,GAAG,CAAC,CAAC;QACjB,IAAIE,QAAQ,KAAKN,IAAI,CAACY,MAAM,GAAG,CAAC,EAAE;UAChCN,QAAQ,EAAE;QACZ,CAAC,MAAM;UACLA,QAAQ,GAAG,CAAC;QACd;MACF;MACAF,YAAY,EAAE;MACdW,UAAU,CAACP,WAAW,EAAED,KAAK,CAAC;IAChC;IAEAC,WAAW,CAAC,CAAC;EAEf,CAAC,EAAE,EAAE,CAAC;EAEN,oBAEEV,OAAA;IAAUW,EAAE,EAAC,aAAa;IAACO,QAAQ;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAW,CAAC;AAEnD;AAACjB,EAAA,CAnCQJ,WAAW;AAAAsB,EAAA,GAAXtB,WAAW;AAqCpB,eAAeA,WAAW;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}